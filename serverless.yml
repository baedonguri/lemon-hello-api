#------------------------------------------------
# Serverless Configuration.
#------------------------------------------------
service: lemon-hello-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-offline
  - serverless-aws-documentation
  - serverless-pseudo-parameters

#------------------------------------------------
# Custome: 초기 환경 설정 로딩을 위한 핵심 설정.
# - config.js 에서 profile별 core 정보를 얻음.
#------------------------------------------------
custom:
  CORE:                                         # Core Configuration.
    profile: ${opt:profile, 'none'}             # run option `--profile`
    region: ${opt:region, 'ap-northeast-2'}     # run option `--region` `-r`
    stage: ${opt:stage, 'dev'}                  # run option `--stage` `-s`
    env: ${opt:env, './env/none.yml'}           # run option `--env`
  CONF: ${file(./env/config.js):CONF}           # `config.js` 에서 CONF() 함수 호출하여 가져옴.
  #------------------------------------------------
  # Documentation
  #   - https://github.com/9cookies/serverless-aws-documentation
  #------------------------------------------------
  documentation: ${file(./swagger/documentation.yml):documentation}
  #------------------------------------------------
  # SQS Queue
  #------------------------------------------------
  queueName: lemon-hello-sqs
  #------------------------------------------------
  # SNS Registration
  #------------------------------------------------
  topicName: lemon-hello-sns
  topicArn:
    Fn::Join:
      - ''
      - - 'arn:aws:sns:'
        - Ref: AWS::Region
        - ':'
        - Ref: AWS::AccountId
        - ':'
        - Fn::GetAtt:
          - MyInputTopic
          - TopicName

#------------------------------------------------
# Provider
#------------------------------------------------
provider:
  name: aws
  profile: ${opt:profile, 'none'}
  stage: ${opt:stage, 'dev'}

  # Lambda Runtime Environment
  memorySize: 256
  timeout: 30
  cfLogs: true
  runtime: ${self:custom.CONF.${self:custom.CORE.profile}.runtime, 'nodejs6.10'}
  region: ${self:custom.CONF.${self:custom.CORE.profile}.region, self:custom.CORE.region}      # profile의 region를 먼저 사용하고, 없으면 실행 옵션값.

  # VPC Configuration for Lambda. 
  vpc:
    securityGroupIds: ${self:custom.CONF.${self:custom.CORE.profile}.securityGroupIds}
    subnetIds: ${self:custom.CONF.${self:custom.CORE.profile}.subnetIds}

  # Lambda function's IAM Role here
  iamRoleStatements:
    #NOTE! - remove할때 lambda ENI Interface를 제거하지 못해서 블럭당하고 있을때, EC2 콘솔에서 강제 지우기 하면 됨!.. (VPC 안쓰면 관계 없음!)
    - Effect: Allow
      Action:
        - cloudwatch:PutMetricData
        - lambda:InvokeFunction
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:AttachNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - ec2:DetachNetworkInterface
        - ec2:ModifyNetworkInterfaceAttribute
        - ec2:ResetNetworkInterfaceAttribute
        - SNS:GetEndpointAttributes
      Resource: "*"
    # SQS
    - Effect: "Allow"
      Action:
        - "sqs:DeleteMessage"
        - "sqs:ReceiveMessage"
      Resource: "arn:aws:sqs:${opt:region, self:provider.region}:*:${self:custom.queueName}"
    # SNS
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource: ${self:custom.topicArn}
    # KMS
    - Effect: Allow
      Action:
        - kms:Decrypt
        - kms:Encrypt
      Resource: "arn:aws:kms:${self:provider.region}:*:key/${self:custom.CONF.${self:custom.CORE.profile}.kmsKey, ''}"   #TODO - improve resource setting.
    # [WSS] send message vis web-socket.
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
      
  # [WSS] custom routes are selected by the value of the action property in the body
  websocketApiRouteSelectionExpression: $request.body.action

  # -------------------------------------------------------
  # you can define service wide environment variables here
  # WARN! - 환경변수에는 object/null 으로 설정할 수 없음.
  environment: ${file(./env/${self:custom.CONF.${self:custom.CORE.profile}.env}):${self:provider.stage}}

#------------------------------------------------
# Functions
#------------------------------------------------
functions:
  #------------------
  # Common SNS Service.
  SNS:
    handler: handler.SNS
    events:
      - sns: 'arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.topicName}'
  #------------------
  # Common SQS Service.
  SQS:
    handler: handler.SQS
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - MyQueue
              - Arn
          batchSize: 1 # the maximum number of SQS messages that AWS will send to your Lambda function on a single trigger. (default: 10)
  #------------------
  # Common WSS (WebSocket Server).
  # - see: https://serverless.com/framework/docs/providers/aws/events/websocket/
  WSS:
    handler: handler.WSS
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
          # authorizer: auth
          # authorizer:
          #   name: auth
          #   identitySource:
          #     - 'route.request.header.Auth'
          #     - 'route.request.querystring.Auth'          
      - websocket:
          route: echo             # sample route by routeKey. echo request.
  #------------------
  # REST API : /hello
  hello:
    handler: handler.hello
    events:
      # - stream: ${self:custom.CONF.${self:custom.CORE.profile}.stream}
      - http:
          path: /hello
          method: get
          cors: true
          authorizer: aws_iam
          documentation:
            summary: "list items"
      - http:
          path: /hello/{id}
          method: get
          cors: true
          authorizer: aws_iam
          documentation:
            summary: "read single item"
      - http:
          path: /hello/{id}/{cmd}
          method: get
          cors: true
          # authorizer: aws_iam
          documentation:
            summary: "action for item."
      - http:
          path: /hello/{id}
          method: put
          cors: true
          authorizer: aws_iam
          documentation:
            summary: "update item."
      - http:
          path: /hello/{id}
          method: post
          cors: true
          authorizer: aws_iam
          documentation:
            summary: "create(or update) item by id"
      - http:
          path: /hello/{id}/{cmd}
          method: post
          cors: true
          authorizer: aws_iam
          documentation:
            summary: "action for item with payload"
      - http:
          path: /hello/{id}
          method: delete
          cors: true
          authorizer: aws_iam
          documentation:
            summary: "delete item"

#------------------------------------------------
# you can add packaging information here
#------------------------------------------------
package:
#  include:
#    - include-me.js
#    - include-me-dir/**
  exclude:
    - src/**          # un-comment this if use gulp build.
    - env/**
    - bin/**
    - data/**
    - docs/**
    - test/**
  excludeDevDependencies: true

#------------------------------------------------
# ## 리소스 생성.
#   - 리소스를 deploy 시점에 생성할 수 있다
#   - 주위! 테스트 목적으로 자동 생성하도록 함.
#   - 운영시, 이 항목은 안쓰일듯.
#------------------------------------------------
resources:
  # 리소스 지정.
  Resources:
    # TABLE CREATED MANUALLY.
    # ## Dynamo Table : 
    # DynamoAtemCoreTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   #DeletionPolicy: Retain
    #   Properties:
    #     TableName: BotItemTable
    #     AttributeDefinitions:
    #       - AttributeName: id
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: id
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 20
    #       WriteCapacityUnits: 20
    #     StreamSpecification:
    #       StreamViewType: "NEW_AND_OLD_IMAGES"
    # -------------------------------
    # SQS Queue
    # -------------------------------
    MyQueue:
      Type: 'AWS::SQS::Queue'
      # https://docs.aws.amazon.com/ko_kr/AWSSimpleQueueService/latest/APIReference/API_SetQueueAttributes.html
      Properties:
        QueueName: '${self:custom.queueName}'
        MessageRetentionPeriod: 1800      # 30 mins
        VisibilityTimeout: 300            # 5 mins
        MaximumMessageSize: 4096          # 4 Kb
        DelaySeconds: 3                   # 3 seconds
        ReceiveMessageWaitTimeSeconds: 20 # 20 seconds

    # -------------------------------
    # This SNS Topic
    # -------------------------------
    MyInputTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        TopicName: '${self:custom.topicName}'
